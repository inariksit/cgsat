{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module BNFC.PrintCG where

-- pretty-printer generated by the BNF converter

import BNFC.AbsCG
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print UIdent where
  prt _ (UIdent i) = doc (showString ( i))


instance Print Id where
  prt _ (Id i) = doc (showString ( i))


instance Print Signed where
  prt _ (Signed i) = doc (showString ( i))



instance Print Grammar where
  prt i e = case e of
   Defs defs -> prPrec i 0 (concatD [prt 0 defs])


instance Print Def where
  prt i e = case e of
   SetDef setdecl -> prPrec i 0 (concatD [prt 0 setdecl])
   RuleDef rule -> prPrec i 0 (concatD [prt 0 rule])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print SetDecl where
  prt i e = case e of
   Set setname tags -> prPrec i 0 (concatD [doc (showString "LIST") , prt 0 setname , doc (showString "=") , prt 0 tags , doc (showString ";")])


instance Print SetName where
  prt i e = case e of
   SetName uident -> prPrec i 0 (concatD [prt 0 uident])


instance Print Tag where
  prt i e = case e of
   Lemma str -> prPrec i 1 (concatD [prt 0 str])
   Tag id -> prPrec i 1 (concatD [prt 0 id])
   Named setname -> prPrec i 1 (concatD [prt 0 setname])
   AND tags -> prPrec i 1 (concatD [doc (showString "(") , prt 0 tags , doc (showString ")")])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Rule where
  prt i e = case e of
   SelectIf tagset conds -> prPrec i 0 (concatD [doc (showString "SELECT") , prt 0 tagset , doc (showString "IF") , prt 0 conds , doc (showString ";")])
   RemoveIf tagset conds -> prPrec i 0 (concatD [doc (showString "REMOVE") , prt 0 tagset , doc (showString "IF") , prt 0 conds , doc (showString ";")])
   SelectAlways tagset -> prPrec i 0 (concatD [doc (showString "SELECT") , prt 0 tagset , doc (showString ";")])
   RemoveAlways tagset -> prPrec i 0 (concatD [doc (showString "REMOVE") , prt 0 tagset , doc (showString ";")])
   MatchLemma str rule -> prPrec i 0 (concatD [prt 0 str , prt 0 rule])


instance Print Cond where
  prt i e = case e of
   C cond -> prPrec i 0 (concatD [prt 1 cond])
   Linked cond0 cond -> prPrec i 1 (concatD [prt 1 cond0 , doc (showString "LINK") , prt 0 cond])
   CNotPos position tagset -> prPrec i 1 (concatD [doc (showString "NOT") , prt 0 position , prt 0 tagset])
   CPos position tagset -> prPrec i 1 (concatD [prt 0 position , prt 0 tagset])
   CBarrier position tagset barrier -> prPrec i 1 (concatD [prt 0 position , prt 0 tagset , prt 0 barrier])
   CNotBar position tagset barrier -> prPrec i 1 (concatD [doc (showString "NOT") , prt 0 position , prt 0 tagset , prt 0 barrier])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print TagSet where
  prt i e = case e of
   TagSet tagset -> prPrec i 0 (concatD [prt 1 tagset])
   OR tag tagset -> prPrec i 1 (concatD [prt 0 tag , doc (showString "OR") , prt 1 tagset])
   Diff tagset0 tagset -> prPrec i 1 (concatD [prt 1 tagset0 , doc (showString "-") , prt 0 tagset])
   Cart tagset0 tagset -> prPrec i 1 (concatD [prt 1 tagset0 , doc (showString "+") , prt 0 tagset])
   All  -> prPrec i 1 (concatD [doc (showString "(*)")])
   NilT tag -> prPrec i 1 (concatD [prt 0 tag])


instance Print Position where
  prt i e = case e of
   Exactly signed -> prPrec i 0 (concatD [prt 0 signed])
   AtLeast signed -> prPrec i 0 (concatD [doc (showString "*") , prt 0 signed])


instance Print Barrier where
  prt i e = case e of
   Barrier tagset -> prPrec i 0 (concatD [doc (showString "BARRIER") , prt 0 tagset])



