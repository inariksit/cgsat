

module BNFC.AbsCG where

-- Haskell module generated by the BNF converter




newtype UIdent = UIdent String deriving (Eq,Ord,Show,Read)
newtype Id = Id String deriving (Eq,Ord,Show,Read)
newtype Signed = Signed String deriving (Eq,Ord,Show,Read)
data Grammar =
   Defs [Def]
  deriving (Eq,Ord,Show,Read)

data Def =
   SetDef SetDecl
 | RuleDef Rule
  deriving (Eq,Ord,Show,Read)

data SetDecl =
   Set SetName [Tag]
  deriving (Eq,Ord,Show,Read)

data SetName =
   SetName UIdent
  deriving (Eq,Ord,Show,Read)

data Tag =
   Lemma String
 | Tag Id
 | Named SetName
 | AND [Tag]
  deriving (Eq,Ord,Show,Read)

data Rule =
   SelectIf TagSet [Cond]
 | RemoveIf TagSet [Cond]
 | SelectAlways TagSet
 | RemoveAlways TagSet
 | MatchLemma String Rule
  deriving (Eq,Ord,Show,Read)

data Cond =
   C Cond
 | Linked Cond Cond
 | CNotPos Position TagSet
 | CPos Position TagSet
 | CBarrier Position TagSet Barrier
 | CNotBar Position TagSet Barrier
  deriving (Eq,Ord,Show,Read)

data TagSet =
   TagSet TagSet
 | OR Tag TagSet
 | Diff TagSet TagSet
 | Cart TagSet TagSet
 | All
 | NilT Tag
  deriving (Eq,Ord,Show,Read)

data Position =
   Exactly Signed
 | AtLeast Signed
  deriving (Eq,Ord,Show,Read)

data Barrier =
   Barrier TagSet
  deriving (Eq,Ord,Show,Read)

